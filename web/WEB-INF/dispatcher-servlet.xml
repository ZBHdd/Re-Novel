<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd   http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <beans profile="dev">
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
            <property name="driverClassName">
                <value>com.mysql.cj.jdbc.Driver</value>
            </property>
            <property name="url">
                <value>jdbc:mysql://localhost:3306/novel?serverTimezone=UTC</value>
            </property>
            <property name="username">
                <value>root</value>
            </property>
            <property name="password">
                <value>123456</value>
            </property>
        </bean>

        <bean id="prop" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <property name="locations">
                <array>
                    <value>classpath:app_dev.properties</value>
                    <value>classpath:rabbitmq-config.properties</value>
                </array>
            </property>
        </bean>
    </beans>

    <beans profile="prod">
        <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
            <property name="driverClassName">
                <value>com.mysql.cj.jdbc.Driver</value>
            </property>
            <property name="url">
                <value>jdbc:mysql://106.14.172.54:3306/novel?serverTimezone=UTC</value>
            </property>
            <property name="username">
                <value>root</value>
            </property>
            <property name="password">
                <value>12345678</value>
            </property>
        </bean>

        <bean id="prop" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
            <!-- 这里是PropertiesFactoryBean类，它也有个locations属性，也是接收一个数组，跟上面一样 -->
            <property name="locations">
                <array>
                    <value>classpath:app.properties</value>
                    <value>classpath:rabbitmq-config.properties</value>
                </array>
            </property>
        </bean>
    </beans>

    <beans>
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource" />
            <property name="configLocation" value="WEB-INF/mybatis-config.xml"></property>
            <!--<property name="mapperLocations" value="classpath:mappings/modules/register/Account.xml"></property>-->
        </bean>

        <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
            <constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
        </bean>
        <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <property name="basePackage" value="www.ccyblog.novel" />
            <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        </bean>


        <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
            <property name="maxIdle" value="5" />
            <property name="maxTotal" value="10"/>
            <property name="testOnBorrow" value="true" />
        </bean>

        <bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
            <property name="hostName" value="106.14.172.54"></property>
            <property name="port" value="5551"></property>
            <property name="password" value="12345678"></property>
            <property name="poolConfig" ref="poolConfig"></property>
            <property name="timeout" value="10000"></property>
        </bean>



        <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
            <property name="connectionFactory" ref="redisConnectionFactory"></property>
        </bean>

        <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
            <constructor-arg name="redisOperations" ref="redisTemplate"></constructor-arg>
        </bean>

        <!--<mvc:resources mapping="/resources/**" location="/resources/" />-->
        <mvc:resources mapping="/images/**" location="/images/" />
        <mvc:resources mapping="/css/**" location="/css/" />
        <mvc:resources mapping="/js/**" location="/js/" />


        <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
            <property name="securityManager" ref="securityManager"/>
            <!-- override these for application-specific URLs if you like:-->
            <property name="loginUrl" value="/account/login"/>
            <property name="successUrl" value="/index"/>
            <property name="unauthorizedUrl" value="/unauthorized"/>
            <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
            <!-- defined will be automatically acquired and available via its beanName in chain        -->
            <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
            <!--<property name="filters">-->
                <!--<util:map>-->
                    <!--<entry key="anAlias" value-ref="shiroFilter"/>-->
                <!--</util:map>-->
            <!--</property>-->
            <property name="filterChainDefinitions">
                <value>
                    # some example chain definitions:
                    # /admin/** = authc, roles[admin]
                    # /docs/** = authc, perms[document:read]
                    # /profile = authc
                    # more URL-to-FilterChain definitions here
                </value>
            </property>
        </bean>

        <!-- Define the realm you want to use to connect to your back-end security datasource: -->
        <bean id="userRealm" class="www.ccyblog.novel.common.security.UserRealm">

        </bean>

        <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
            <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
            <property name="realm" ref="userRealm"/>
        </bean>

        <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

        <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
            <!-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!   -->
            <!-- 一定要注意这个选项， 必需要使用true,  要不然外部使用aop:aspectj-autoproxy时， 会导致被shiro注解的类，全部找不到， 并且没有任何报错-->
            <!-- 卡了一整天， shiro的官方教程真是不靠谱 -->
            <property name="proxyTargetClass" value="true"></property>
        </bean>
        <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
            <property name="securityManager" ref="securityManager"/>
        </bean>

        <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
        <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
        <!-- applications - see the 'Web Applications' section below instead.                 -->
        <!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
        <!--<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>-->
        <!--<property name="arguments" ref="securityManager"/>-->
        <!--</bean>-->

        <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
            <property name="exceptionMappings">
                <props>
                    <prop key="org.apache.shiro.authz.UnauthenticatedException">redirect:/account/login</prop>
                    <prop key="org.apache.shiro.authz.UnauthorizedException">redirect:/account/login</prop>
                </props>
            </property>
        </bean>

        <rabbit:connection-factory id="rabbitConnectionFactory"
                                   host="${mq.host}"
                                   port="${mq.port}"
                                   username="isghost"
                                   password="${mq.password}"/>
        <rabbit:admin connection-factory="rabbitConnectionFactory"></rabbit:admin>
        <rabbit:queue name="novel.alert.queue"></rabbit:queue>
        <rabbit:queue name="novel.alert.queue.uploadImage"></rabbit:queue>

        <rabbit:fanout-exchange name="novel.fanout">
        </rabbit:fanout-exchange>

        <rabbit:direct-exchange name="novel.direct">
            <rabbit:bindings>
                <rabbit:binding queue="novel.alert.queue.uploadImage"></rabbit:binding>
            </rabbit:bindings>
        </rabbit:direct-exchange>

        <rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory"
            />


        <!--下面为接收方配置-->
        <!--<bean id="loginListener" class="www.ccyblog.novel.common.logs.Rabbit"></bean>-->

        <!--<rabbit:listener-container connection-factory="rabbitConnectionFactory">-->
            <!--<rabbit:listener ref="loginListener"-->
                             <!--method="handlerLoginAlert"-->
                             <!--queue-names="novel.alert.queue"/>-->

        <!--</rabbit:listener-container>-->

        <bean id="loginServiceClient" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean" >
            <property name="serviceUrl" value="${loginServiceUrl}/login.service"></property>
            <property name="serviceInterface" value="www.ccyblog.novel.common.service.LoginService"></property>
        </bean>

        <bean id="simpleUrlHandlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
            <property name="urlMap">
                <map>
                    <entry key="/login.service" value-ref="httpInvokerServiceExporter" />
                </map>
            </property>
        </bean>


    </beans>



</beans>